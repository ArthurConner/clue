# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['people', 'weapons', 'rooms', 'cardFull', 'cardShort', 'cIndentity', 'printHand', 'keyForCard', 'chooseCard',
           'cardLookup', 'keyCard', 'keyLookUp', 'createClue', 'printPlayer', 'printGame', 'printLocs', 'getSeen',
           'location', 'getPlay', 'trips', 'showChoice', 'keysForGuess', 'getAnswer', 'relocatePlayers']

# %% ../nbs/00_core.ipynb 3
from termcolor import colored
from random import shuffle, randint, sample
import emoji
import tabulate

# %% ../nbs/00_core.ipynb 4
def cardFull(info):
    name,color, icon = info[:3]
    if len(icon) > 0:
        ret = icon + " " + colored(name,color)
    else:
        ret = colored(name,color)
    
    return ret

def cardShort(info):
    if len(info) < 3:
        return cardFull(info)
    color,icon, name = info[1:]
    if len(icon) > 0:
        ret = icon + " " + colored(name,color)
    else:
        ret = colored(name,color)
   
    return  ret


# %% ../nbs/00_core.ipynb 8
people = []
people.append(["Miss Scarlet","red",u"\U0001f460","Scar."])
people.append(["Colonel Mustard","yellow",u"\U0001F9D0","Must."])
people.append([" Mrs. White","white",u"\u2661"," White"])
people.append(["Mr. Green","green",u"\U0001F409","Green"])
people.append(["Professor Plum","magenta",u"\U0001F346","Plum "])
people.append(["Mrs. Peacock","blue",u"\U0001F99A","Peac."])


# %% ../nbs/00_core.ipynb 9
weapons = []
weapons.append(["Knife","cyan",u"\U0001F52A","Knife"])
weapons.append(["Revolver","cyan",u"\U0001F52B","Gun"])
weapons.append(["Rope","cyan",emoji.emojize(":knot:"),"Rope"])
weapons.append(["Wrench","cyan",emoji.emojize(":wrench:"),"Wrench"])
weapons.append(["Candlestick","cyan",emoji.emojize(":candle:"),"Candle"])
weapons.append(["Lead Pipe","cyan",emoji.emojize(":plunger:"),"Pipe"])

# %% ../nbs/00_core.ipynb 10
rooms = []
rooms.append(["Ball Room","grey","","Ball"])
rooms.append(["Billiard Room","grey","","Bill"])
rooms.append(["Conservatory","grey","","Consv"])
rooms.append(["Dining Room","grey","","Dining"])
rooms.append(["Hall","grey","","Hall"])
rooms.append(["Kitchen","grey","","Kitch"])
rooms.append(["Lounge","grey","","Lounge"])
rooms.append(["Library","grey","","Lib"])
rooms.append(["Study","grey","","Study"])

# %% ../nbs/00_core.ipynb 11
def cIndentity(x):
  return x[0]
    
def printHand(hand,view=cIndentity):
    container = []
    line = [view(card) for card in hand]
    print(', '.join(line))


# %% ../nbs/00_core.ipynb 16
def keyForCard(v):
    return v[0] * 100 + v[1]
    
def chooseCard(hand,view=cIndentity,fmt="fancy_grid",flag = {}):
    container = []
    i = 1
    ml = max([len(x[0]) for x in hand])

    no = " "
    
    for card in hand:
        face = view(card)
        #face.append(i)
        color = card[1]
        no = " "
        if card[0] in flag:
            no = "*"
        container.append(colored(str(i) +")" + no + " " ,color) + face)
        i += 1
    choice = -1
    
    while choice < 1:
        for card in container:
            print(card)
        choice = int(input("Choose from 1 to " +  str(len(container))+": "))
       
        if (choice > 0) and (choice <= len(container)):
            return choice
        print(str(choice) + " is not in range")
        choice = -1
            



# %% ../nbs/00_core.ipynb 23
def cardLookup(kind,index):
    if kind == 1:
        return people[index]
    if kind == 2:
        return weapons[index]
    return rooms[index]

def keyCard(kind,index):
    return kind*100 + index

def keyLookUp(key):
    kind = key // 100
    index = key % 100
   # print(key,kind,index)
    return cardLookup(kind,index)
     

# %% ../nbs/00_core.ipynb 25
def createClue(playerCount):
    bhand = [[1,randint(0,len(people)-1)],[2,randint(0,len(weapons)-1)],[3,randint(0,len(rooms)-1)]]
    ahand = [keyCard(x[0],x[1]) for x in bhand]
    ploc = sample(range(len(rooms)),len(people))
    
    person = ahand[0]
    
    pdeck = [keyCard(1,x) for x in range(len(people))]
    deck = [[1,x] for x in range(len(people)) if x != person]
    deck = [x for x in pdeck if x != person]
    
    weapon = ahand[1]
    wdeck = [keyCard(2,x) for x in range(len(weapons))]
    deck += [x for x in wdeck if x != weapon]
   
    room = ahand[2]
    wdeck = [keyCard(3,x) for x in range(len(rooms))]
    deck += [x for x in wdeck if x != room]

    
    shuffle(deck)
    decks = [ahand]
    
    for i in range(playerCount):
        decks.append([])
        
   

    cIndex = 1
    for card in deck:
        decks[cIndex].append(card)
        cIndex += 1
        if cIndex > playerCount:
            cIndex = 1
    decks.append(ploc)        
    return decks


def printPlayer(game,i):
    ploc = game[-1]
    person = people[i-1]
    d = cardFull(person)
    loc = cardFull(cardLookup(3,ploc[i-1]))
    d = "[" + str(i) + "] " + d  + " is in " + loc 
    print("\n" + d.center(70," "))
 
    ahand = game[i]
    maps = [keyLookUp(x) for x in ahand]
    printHand(maps,cardFull)

    
def printGame(game):
    print("Solution")
    ahand = game[0]
   
    maps = [keyLookUp(x) for x in ahand]
    printHand(maps,cardFull)
    for i in range(1,len(game)-1):
        printPlayer(game,i)
        

def printLocs(game):

    ploc = game[-1]
    #print(ploc)
    for i in range(len(ploc)):
        person = people[i]
        d = cardFull(person)
        loc = cardFull(cardLookup(3,ploc[i-1]))
        d = "[" + str(i+1) + "] " + d  + " is in " + loc 
        print(d)
     
       

# %% ../nbs/00_core.ipynb 28
def getSeen(playerID, game, moves):
    foo = [x[-1] for x in moves if x[3] == playerID]
    return game[playerID] + foo


def location(playerID,game):
    ploc = game[-1]
    return ploc[playerID-2]
    

# %% ../nbs/00_core.ipynb 29
def getPlay(pc,game, moves):
    
    ploc = game[-1]
    r2 = location(pc,game)
    
    person = people[pc-1]
    d = cardFull(person)
    #print(pc,r2)
    loc = cardFull(cardLookup(3,r2))
    
    d = "[" + str(pc) + "] " + d  + " is in " + loc 
    print("\n" + d.center(70," "))

    ahand = game[pc]
    maps = [keyLookUp(x) for x in ahand]
    #printHand(maps,cardFull)

    seen = [keyLookUp(x)[0] for x in getSeen(pc,game, moves)]
    exclude  = set(seen)
    

    print("\nSuspect")
    p = chooseCard(people,cardFull,flag=exclude)-1
    print("\n\nWeapon")
    w = chooseCard(weapons,cardFull,flag=exclude)-1
    

    print("\n\nMove To")
    passages = trips(r2,len(rooms))

                     
    locs = [cardLookup(3,x) for x in passages ]
    l = chooseCard(locs,cardFull,flag=exclude) 
    l = trips(r2,len(rooms))[l-1]
    
    return (p,w,l)



    

def trips(x,l):
    r1 = x -1
    if r1 < 0:
        r1 = l - 1
    r3 = x + 1
    if r3 > l - 1:
        r3 = 0
    return [r1,x,r3]



# %% ../nbs/00_core.ipynb 32
def showChoice(p,w,l):
    ret = cardFull(cardLookup(1,p))
    ret = ret + " with the " + cardFull(cardLookup(2,w))
    ret = ret + " in the " + cardFull(cardLookup(3,l))
    return ret


def keysForGuess(p,w,l):
    h = [[1,p],[2,w],[3,l]]
    h = [keyCard(x[0],x[1]) for x in h]
    return h

def getAnswer(playerNum,game,guess):
    #print(guess)
    (p,w,l) = guess
    #print(showChoice(p,w,l))
    h = keysForGuess(p,w,l)
    
   
    shuffle(h)
    
    playCount = len(game) - 1
    
    c = playerNum+1
    
    if c > playCount:
        c = 1
    while c != playerNum:
        hand = game[c]
        #printPlayer(game,c)
        for y in h:
            for x in hand:
                #print(x,y,cardFull(keyLookUp(x)),cardFull(keyLookUp(y)))
                if x == y :
                    return (p,w,l,playerNum, c,y)
        #print(str(c) + " pass")
        c = c+1
        if c >= playCount:
            c = 1
    return (-1,0)
    

# %% ../nbs/00_core.ipynb 38
def relocatePlayers(playerNum , p,l,game):
  
    game[-1][playerNum-2] = l
    game[-1][p-1] = l
    #print(playerNum-1,p)
    #printLocs(game)
    return  game


agame = createClue(4)
amoves = []
player = 1
done = False
printLocs(agame) 
done = False


sh = agame[1]

printHand([keyLookUp(x) for x in sh],cardFull)

while not done:
    
    ans = getPlay(player,agame,amoves)
    agame = relocatePlayers(player , ans[0],ans[2],agame)
    print("\nPlayer " + str(player) + " suspects " + showChoice(ans[0],ans[1],ans[2]))
    check = getAnswer(player,agame,ans)
    if check[0] < 0:
        seen =  getSeen(player,agame, amoves)
        exclude  = set(seen)
        done = True
        for x in keysForGuess(ans[0],ans[1],ans[2]):
            if x in exclude:
                print("\n\n gave a false one " +  cardFull(keyLookUp(x)))
                done = False
        
    else:
        #(p,w,l,playerNum, c,y[0],y[1])
        card = check[-1]
        
        amoves.append(check)
        print("\n\nPlayer " + str(check[-2]) + " has " + cardFull(keyLookUp(card)))
        #printLocs(agame)
       # player = player + 1
        if player>len(agame)-1:
           player = 1 

print("Player " + str(player) + " won")
printGame(agame) 